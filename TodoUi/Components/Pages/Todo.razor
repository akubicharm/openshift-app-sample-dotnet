@page "/todo"
@rendermode InteractiveServer
@using BlazorTodo.Models
@using BlazorTodo.Services
@using ChatUi.Services
@using ChatUi.Models
@inject ITodoService TodoService
@inject IChatService ChatService
@inject PersistentComponentState ApplicationState
@inject IConfiguration Config

<PageTitle>Todo</PageTitle>

<h1>Todo</h1>

<textarea placeholder="Something todo" @bind="newTodo" />
<button class="btn btn-success" @onclick="AddTodoItem">Add todo</button>
<button class="btn btn-info" @onclick="@(async () => await QuestionItem(newTodo))">質問する
</button>

<table class="table">
    <tbody>
        <tr>
        <td width="10%">
<pre>
 __    __
/ \\..// \
  ( oo )  
   \__/            
</pre><br>「質問する」や「教えて」ボタンをすると、答えが隣にでるよ！
</td>
        <td class=text-center>@summary</td>
        </tr>
    </tbody>
</table>

<table class="table">
    <thead>
        <tr>
            <th class="text-center">
                <label>
                    Complete
                    <input type="checkbox" @bind="getCompletedItems" @bind:after="GetTodoItems" />
                </label>
            </th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (todoItems != null)
        {
            @foreach (var item in todoItems)
            {
                <tr>
                    <td class="text-center">
                        @if (item.IsComplete)
                        {
                            <span>✔</span>
                        }
                    </td>
                    <td>@item.Name</td>
                    <td class="text-center">
                        <!--
                        <button class="btn btn-warning" @onclick="@(() => EditItem(item.Id))">
                            Edit
                        </button> -->
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteItem(item.Id))">
                            Delete
                        </button>
                        <button class="btn btn-info" @onclick="@(async () => await AdviceItem(item.Name))">教えて</button>

                    </td>
                </tr>
            }
        }
    </tbody>
</table>



@code {
    private TodoItem[]? todoItems = Array.Empty<TodoItem>();
    private string? newTodo;
    private PersistingComponentStateSubscription persistingSubscription;
    private bool getCompletedItems;
    private string? summary;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<TodoItem[]>(nameof(todoItems), out var restoredData))
        {
            await GetTodoItems();
        }
        else
        {
            todoItems = restoredData!;
        }
        summary = "";
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(todoItems), todoItems);

        return Task.CompletedTask;
    }

    private async Task GetTodoItems()
    {
        todoItems = await TodoService.GetTodosAsync() ?? Array.Empty<TodoItem>();
    }

    private async Task AddTodoItem()
    {
        Console.WriteLine("AddTodoItem");
        if (!string.IsNullOrEmpty(newTodo))
        {
            var addItem = new TodoItem { Name = newTodo, IsComplete = false };
            await TodoService.PostTodoAsync(addItem);
            @* newItemName = string.Empty; *@
            await GetTodoItems();
            @* editRowStyle = "none"; *@
        }
    }

    private void EditItem(long id)
    {
    }

    private async Task DeleteItem(long id)
    {
        await TodoService.DeleteTodoAsync(id);
        await GetTodoItems();

    }

    private async Task AdviceItem(string? name)
    {
        Console.WriteLine("AdviceItem");
        var msg = new Message { Text = name, System = "Give advice"};
        var res = await ChatService.PostChatAsync(msg);
        summary = res.Text;
    }

    private async Task QuestionItem(string? name)
    {
        Console.WriteLine("QuestionItem");
        var msg = new Message { Text = name};
        var res = await ChatService.PostChatAsync(msg);
        summary = res.Text;
    }

}
